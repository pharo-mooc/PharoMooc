1
00:00:00,360 --> 00:00:00,400
"Implementación de una tirada de dado"

2
00:00:04,560 --> 00:00:04,600
Quentin Ducasse.

3
00:00:04,640 --> 00:00:07,840
-Buenos días a todos. En esta parte
dos del "Redo" de la tercera semana,

4
00:00:08,160 --> 00:00:09,880
miraremos el juego de dados

5
00:00:10,200 --> 00:00:13,560
presentado en el último video
y cómo implementarlo.

6
00:00:13,880 --> 00:00:17,760
Así, la API que deseamos tener
se parece a esto.

7
00:00:18,080 --> 00:00:20,960
Vamos a tener "DieHandle new",
para crearlo.

8
00:00:21,280 --> 00:00:24,920
Agregamos un dado
a nuestra tirada de dado con "addDie".

9
00:00:25,240 --> 00:00:31,640
Necesitamos el dado que queremos agregar: 
"Die withFaces: 6".

10
00:00:31,960 --> 00:00:36,520
Queremos agregar varios dados
con el mismo método,

11
00:00:36,840 --> 00:00:39,800
pero puede ser un número de caras
diferente, 10,

12
00:00:40,120 --> 00:00:41,840
y devolvemos esta instancia.

13
00:00:42,160 --> 00:00:43,280
Esta que se pasa aquí,

14
00:00:43,600 --> 00:00:45,840
es que la primera línea
nos va a crear una instancia,

15
00:00:46,160 --> 00:00:49,080
una tirada de dados, a la cual
vamos a agregar un dado de seis caras.

16
00:00:49,400 --> 00:00:52,440
El ";" significa que el mensaje
siguiente será enviado

17
00:00:52,760 --> 00:00:54,400
al mismo receptor
que el mensaje anterior.

18
00:00:54,720 --> 00:00:56,880
Queremos decir que "addDie" con 10 caras

19
00:00:57,200 --> 00:00:59,720
será enviado al mismo receptor
que "addDie" con seis caras,

20
00:01:00,040 --> 00:01:02,160
es decir la instancia tirada de dados.

21
00:01:02,480 --> 00:01:04,840
Un nuevo ";",
esta vez aquí, devolvemos la instancia.

22
00:01:05,160 --> 00:01:07,760
Entonces, vamos a implementar todo esto.

23
00:01:08,080 --> 00:01:10,720
Comenzamos implementando
la clase del test,

24
00:01:11,040 --> 00:01:12,440
"#DieHandleTest".

25
00:01:12,760 --> 00:01:14,040
Guardamos.

26
00:01:14,360 --> 00:01:21,160
Vamos aquí: 
"testCreationAndAddingIsOk".

27
00:01:21,480 --> 00:01:24,920
Queremos lo mismo
que pudimos hacer aquí.

28
00:01:25,240 --> 00:01:26,080
Copiaré esto,

29
00:01:26,400 --> 00:01:29,120
excepto que necesitamos tener
una variable temporal

30
00:01:29,440 --> 00:01:31,880
que llamaremos "handle".

31
00:01:32,200 --> 00:01:34,240
Listo, arreglé la tabulación.

32
00:01:35,840 --> 00:01:36,600
Un punto.

33
00:01:36,920 --> 00:01:39,680
Que verificaremos,
es el número de dados

34
00:01:40,000 --> 00:01:45,640
en nuestra tirada de dados: 
"handle diceNumber equals: 2".

35
00:01:45,960 --> 00:01:47,720
Aún no hemos definido nada.

36
00:01:48,040 --> 00:01:49,960
Muchas cosas no se entienden,

37
00:01:50,280 --> 00:01:53,240
como "dieHandle",
los métodos "addDie", "diceNumber".

38
00:01:53,560 --> 00:01:55,760
Los definiremos más tarde.
Guardamos.

39
00:01:56,080 --> 00:01:58,800
La clase no es entendida,
debemos definirla

40
00:01:59,120 --> 00:02:02,800
con una variable de instancia,
que será la colección de dados

41
00:02:03,120 --> 00:02:06,840
que son entendidos
en esta tirada de dados.

42
00:02:07,160 --> 00:02:10,200
OK. Los mensajes no se entienden,
pero está bien.

43
00:02:10,520 --> 00:02:17,600
Creamos otro test:
"testCreationWithTheSameDie".

44
00:02:17,920 --> 00:02:19,120
¿Qué haremos?

45
00:02:19,440 --> 00:02:25,040
Creamos nuestra tirada de dados
de la misma forma, listo.

46
00:02:25,360 --> 00:02:28,680
Excepto que esta vez, 
simplemente verificaremos

47
00:02:29,000 --> 00:02:30,160
que si agregamos una

48
00:02:30,480 --> 00:02:35,000
nos devuelve un dado
dentro de la colección,

49
00:02:35,320 --> 00:02:36,840
pero si agregamos un segundo,

50
00:02:37,160 --> 00:02:39,200
no necesitaremos reinstanciarlo.

51
00:02:39,520 --> 00:02:41,520
Agregamos un segundo dado del mismo tipo.

52
00:02:41,840 --> 00:02:43,440
Queremos que sea igual a dos.

53
00:02:43,760 --> 00:02:44,520
Guardamos.

54
00:02:44,840 --> 00:02:47,760
Tenemos nuestro test. Si hago click aquí,
se abrirá el depurador.

55
00:02:48,080 --> 00:02:50,960
Esta vez, lo vamos a crear
a mano, en la clase.

56
00:02:51,280 --> 00:02:52,480
Iremos aquí.

57
00:02:52,800 --> 00:02:55,080
Creamos un método
"initialize"

58
00:02:55,400 --> 00:02:58,400
que enviará "super initialize",

59
00:02:58,720 --> 00:03:00,720
las inicializaciones de la super clase.

60
00:03:01,040 --> 00:03:05,560
Luego inicializamos
nuestra variable de instancia "dice"

61
00:03:05,880 --> 00:03:10,040
a una colección "new".

62
00:03:10,360 --> 00:03:11,360
Guardamos.

63
00:03:11,680 --> 00:03:13,600
Debemos agregar
el método para agregar un dado :

64
00:03:13,920 --> 00:03:15,880
"addDie: aDie".

65
00:03:16,200 --> 00:03:19,720
Lo que haremos es
llamar el método "add"

66
00:03:20,040 --> 00:03:22,440
sobre nuestra variable de instancia "dice".

67
00:03:22,760 --> 00:03:23,640
Guardamos.

68
00:03:23,960 --> 00:03:27,280
Lo que nos falta,
es el getter "dice",

69
00:03:27,600 --> 00:03:30,480
que devolverá simplemente "dice",

70
00:03:30,800 --> 00:03:33,520
y "diceNumber",
que usamos en nuestro test,

71
00:03:33,840 --> 00:03:37,400
que devolverá la cantidad de "dice",
entonces "dice size".

72
00:03:37,720 --> 00:03:38,480
Guardamos.

73
00:03:38,800 --> 00:03:41,360
Tenemos nuestros cuatro métodos,
y si re-lanzamos los tests,

74
00:03:41,680 --> 00:03:42,480
serán verdes.

75
00:03:42,800 --> 00:03:45,200
Es un buen momento
para guardar nuestro repositorio.

76
00:03:45,520 --> 00:03:47,240
Vamos a Iceberg.

77
00:03:48,440 --> 00:03:52,840
Puedes ver que nuestro repositorio
no está guardado.

78
00:03:53,160 --> 00:03:55,080
Los cambios
no fueron enviados,

79
00:03:55,400 --> 00:03:58,360
entonces hacmeos doble-click aquí,
click en Commit,

80
00:03:58,680 --> 00:04:04,360
y dirá:
"DieHandle first methods with tests".

81
00:04:04,680 --> 00:04:06,520
Podemos ver aquí
todo lo que agregamos,

82
00:04:06,840 --> 00:04:09,720
nuestros cuatro métodos, nuestros dos tests,
hacemos commit.

83
00:04:10,040 --> 00:04:13,120
Cerramos Iceberg por ahora
y nos interesaremos

84
00:04:13,440 --> 00:04:15,720
en los retornos que podemos tener
como programadores

85
00:04:16,040 --> 00:04:16,840
sobre los dados aquí.

86
00:04:17,160 --> 00:04:21,800
Entonces, si hago Cmd+P (Ctrl+P), Print,
tendremos "aDie".

87
00:04:22,120 --> 00:04:25,320
Aunque es interesante,
podemos hacerlo mejor.

88
00:04:25,640 --> 00:04:27,680
Podríamos indiquera el número de caras.

89
00:04:28,000 --> 00:04:30,040
Para cambiar la salida
que tenemos al hacer "Print",

90
00:04:30,360 --> 00:04:32,080
es necesario llamar
al método "printOn:".

91
00:04:32,400 --> 00:04:34,680
Este método toma un "aStream".

92
00:04:35,000 --> 00:04:37,560
Nos gustaría tener algo que,
al final,

93
00:04:37,880 --> 00:04:44,640
Nos dé, por ejemplo,
"a Die (faces number)".

94
00:04:45,880 --> 00:04:46,720
¿Cómo hacemos eso?

95
00:04:47,040 --> 00:04:50,000
Necesitamos que "aDie",
sea lo que ya tenemos.

96
00:04:50,320 --> 00:04:56,720
Haremos "super printOn: aStream",

97
00:04:57,040 --> 00:05:01,400
y luego,
haremos "aStream nextPutAll:".

98
00:05:01,720 --> 00:05:04,000
Agregaremos, seguido de eso,

99
00:05:04,320 --> 00:05:07,280
un paréntesis con el número de caras.

100
00:05:07,600 --> 00:05:09,320
Para concatenar
las cadenas de caracteres,

101
00:05:09,640 --> 00:05:10,440
es la coma.

102
00:05:10,760 --> 00:05:13,520
"faces print"...

103
00:05:13,840 --> 00:05:16,400
Oups, espera,
hacemos eso sobre la clase equivocada

104
00:05:16,720 --> 00:05:18,920
Lo estamos haciendo
en "dieHandle".

105
00:05:19,240 --> 00:05:20,560
Salimos de esto.

106
00:05:22,760 --> 00:05:26,480
Vamos a "Die",
es aquí que debemos hacer el "printOn:".

107
00:05:26,800 --> 00:05:29,560
Entonces, el número de faces, "printString".

108
00:05:29,880 --> 00:05:34,280
Coma, luego vamos a tener
otra concatenación,

109
00:05:34,600 --> 00:05:35,520
paréntesis de cierre.

110
00:05:35,840 --> 00:05:39,720
Si guardo esto y observo
a quién corresponde aquí,

111
00:05:40,040 --> 00:05:44,760
tendremos "a Die (6)",
y aquí, "a Die (10)".

112
00:05:45,080 --> 00:05:46,640
Es el comportamiento que buscamos.

113
00:05:46,960 --> 00:05:48,400
Es correcto.

114
00:05:48,720 --> 00:05:50,960
Ahora, debemos definir

115
00:05:51,280 --> 00:05:53,760
un método
para lanzar una tirada de dados.

116
00:05:54,080 --> 00:05:57,520
Para hacer esto, hacemos "roll".

117
00:05:57,840 --> 00:05:59,760
Necesitamos tener el resultado,

118
00:06:00,080 --> 00:06:02,360
definiremos,
como una variable temporal.

119
00:06:02,680 --> 00:06:03,920
La inicializaremos a cero,

120
00:06:04,240 --> 00:06:06,040
luego iteraremos
sobre la colección de dados.

121
00:06:06,360 --> 00:06:10,440
Para hacer esto, hacemos "dice",
nuestra colección de dados, "do:",

122
00:06:10,760 --> 00:06:14,000
y necesitamos pasar
un bloque de código entre corchetes.

123
00:06:14,320 --> 00:06:18,160
Para iterar sobre cada elemento,
utilizamos ": each",

124
00:06:18,480 --> 00:06:25,360
y decimos lo que vamos a hacer: 
"res := res + each roll".

125
00:06:27,320 --> 00:06:29,440
Y debemos devolver el resultado.

126
00:06:29,760 --> 00:06:32,680
Esto va a ser
nuestro método de lanzar dados

127
00:06:33,000 --> 00:06:34,640
para una tirada.

128
00:06:34,960 --> 00:06:36,800
Dentro del test,
Necesitaremos obtener

129
00:06:37,120 --> 00:06:40,840
el valor máximo que podemos tener,
que llamaremos "maxValue".

130
00:06:41,160 --> 00:06:44,760
Lo que vamos a hacer,
es que veremos el resultado,

131
00:06:45,080 --> 00:06:48,640
Iteraremos, pero sin lanzar el dado,
agregaremos el número de caras.

132
00:06:48,960 --> 00:06:52,760
Listo, tenemos nuestro método "maxValue",
nuestro método "roll".

133
00:06:53,080 --> 00:06:54,520
Definiremos los tests asociados.

134
00:06:54,840 --> 00:06:56,200
Aquí vamos.

135
00:06:57,240 --> 00:06:59,120
"testMaxValue".

136
00:06:59,440 --> 00:07:05,760
Verificaremos con nuestro "handle"
ese, por ejemplo.

137
00:07:06,080 --> 00:07:07,840
Pondremos "10".

138
00:07:08,160 --> 00:07:12,640
Verificamos que "maxValue equals"...

139
00:07:12,960 --> 00:07:17,600
Vamos a verificar que esto da 16
así que 6 más 10.

140
00:07:17,920 --> 00:07:19,760
Guardamos, podemos lanzarlo.

141
00:07:20,080 --> 00:07:24,240
El test es verde, es correcto.
Ahora, verificaremos "roll".

142
00:07:24,560 --> 00:07:26,920
Utilizaremos la misma tirada de dados

143
00:07:27,240 --> 00:07:32,960
y haremos "handle roll between:",

144
00:07:33,280 --> 00:07:36,120
lo haremos entre paréntesis.

145
00:07:37,640 --> 00:07:38,400
Así.

146
00:07:38,720 --> 00:07:44,360
Esto será entre el número de dados :
"handle diceNumber",

147
00:07:44,680 --> 00:07:47,680
este es el caso
donde todos los dados tiran 1,

148
00:07:48,000 --> 00:07:52,560
y "and: handle maxValue".

149
00:07:53,920 --> 00:07:55,720
Ok. ¿Que hará esto?

150
00:07:56,040 --> 00:07:58,320
Verificamos que
cuando lanzamos nuestra tirada de dados,

151
00:07:58,640 --> 00:08:00,680
estará entre el número de dados

152
00:08:01,000 --> 00:08:02,920
en el caso
que todos los dados tiren 1

153
00:08:03,240 --> 00:08:06,720
y el caso donde todos los dados tiren
respectivamente su cifra máxima.

154
00:08:07,040 --> 00:08:09,640
Por ejemplo, éste hace un 10,
este hace un 6.

155
00:08:09,960 --> 00:08:10,880
Guardamos.

156
00:08:11,200 --> 00:08:12,160
Lanzamos el test.

157
00:08:12,480 --> 00:08:15,040
Todo es verde, esto concluirá
la segunda parte del "Redo".

158
00:08:15,360 --> 00:08:18,400
Antes de terminar, guardaremos
lo que hicimos en Iceberg.

159
00:08:18,720 --> 00:08:20,920
Una vez más,
podemos ver "uncommitted changes",

160
00:08:21,240 --> 00:08:23,280
entonces hacemos doble-click,
cliqueamos sobre Commit

161
00:08:23,600 --> 00:08:24,920
y escribiremos :

162
00:08:25,240 --> 00:08:32,680
"Roll method
implemented for DieHandle,",

163
00:08:33,000 --> 00:08:35,920
y diremos
que agregamos un "printOn":

164
00:08:36,240 --> 00:08:40,120
"better print for Die".

165
00:08:41,240 --> 00:08:42,240
Commit.

166
00:08:42,560 --> 00:08:44,360
Listo, tenemos todo actualizado.

167
00:08:44,680 --> 00:08:47,320
Nos encontraremos
en la tercera parte

168
00:08:47,640 --> 00:08:52,040
para los últimos ajustes respecto 
a lo que queríamos hacer al principio.

169
00:08:52,360 --> 00:08:57,120
Queríamos tener algo
que hiciera "1 D4 + 2 D6",

170
00:08:57,440 --> 00:09:00,880
y por ahora, tenemos
este comportamiento que lo simula,

171
00:09:01,200 --> 00:09:02,760
pero no lo podemos escribir así.

172
00:09:03,080 --> 00:09:05,880
Veremos cómo podemos hacerlo
en nuestro próximo video.

