1
00:00:02,920 --> 00:00:03,720
-こんにちは、みなさん

2
00:00:04,040 --> 00:00:08,520
このビデオではテストクラスや

3
00:00:08,840 --> 00:00:10,520
その中でのテストの作り方を
見ていきましょう。

4
00:00:11,240 --> 00:00:17,000
前回は、アクセサーが正しく動くことを
確認しました。

5
00:00:17,320 --> 00:00:21,120
今回は、その時の振る舞いをテストの中で
再現したいと思います。

6
00:00:21,560 --> 00:00:25,560
そのためには、
Counter クラスのところへ行って

7
00:00:26,200 --> 00:00:28,320
「CounterTest」を生成します。

8
00:00:28,640 --> 00:00:32,600
Object ではなく TestCase の
サブクラスです。

9
00:00:33,640 --> 00:00:36,160
「count」インスタンス変数は
必要ありません。

10
00:00:36,880 --> 00:00:38,880
これで Cmd+S を押します。

11
00:00:39,200 --> 00:00:40,560
CounterTest が現れました。

12
00:00:40,880 --> 00:00:43,680
左側に灰色のボタンがあるのが見えますね。

13
00:00:44,000 --> 00:00:49,640
この灰色のボタンはこのクラスのテスト全てを
一通り実行するためのものです。

14
00:00:49,960 --> 00:00:52,800
今はテストがないので
たいしたことはしません。

15
00:00:53,440 --> 00:00:56,760
1つ作りましょう。

16
00:00:58,120 --> 00:01:02,840
「testCounterIsSetAndRead」です。

17
00:01:04,240 --> 00:01:08,840
ここにあるコードをコピペしましょう。

18
00:01:09,160 --> 00:01:11,560
そして最後の行つまり
最後の表現式では

19
00:01:11,880 --> 00:01:16,680
インスタンス変数の値を
単に出力するのではなく

20
00:01:17,000 --> 00:01:20,720
7に対して突き合わせて
正解かどうかを見ます。

21
00:01:21,040 --> 00:01:22,000
そのためには

22
00:01:22,320 --> 00:01:26,240
「self assert:」と書いて

23
00:01:27,120 --> 00:01:28,360
そして、「c count」

24
00:01:28,680 --> 00:01:32,520
これを「equals: 7」で突き合わせます。

25
00:01:32,840 --> 00:01:36,760
これで、「c count」を実行して
その結果が 7 に等しいかどうかを見ます。

26
00:01:37,080 --> 00:01:40,680
これが意図したことなので
動くはずです。

27
00:01:41,160 --> 00:01:43,000
Cmd+S を押しましょう。

28
00:01:46,000 --> 00:01:49,080
メソッドが定義されて

29
00:01:49,520 --> 00:01:52,800
クラス名の脇にあるのと同じように

30
00:01:53,120 --> 00:01:54,080
灰色のボタンがここにあります。

31
00:01:54,400 --> 00:01:57,480
このメソッドのテストを実行するものです。

32
00:01:58,040 --> 00:02:01,200
これをクリックすると
実行されて合格しました。

33
00:02:01,520 --> 00:02:03,120
こちらのボタンをクリックすると

34
00:02:03,440 --> 00:02:06,080
このクラスの全てのテストを実行します。

35
00:02:06,560 --> 00:02:08,520
今は、このテストだけです。

36
00:02:09,120 --> 00:02:10,760
テストがグリーンであれば

37
00:02:11,080 --> 00:02:13,080
イメージを保存するのに良いタイミングです。

38
00:02:13,400 --> 00:02:16,240
Pharo メニューへ行って、Save です。

39
00:02:17,360 --> 00:02:21,000
さて、もう1つテストを書いてみましょう。
ちょっとマインドセットを変えて。


40
00:02:21,320 --> 00:02:24,120
テスト駆動開発をやってみましょう。

41
00:02:24,440 --> 00:02:27,480
つまり、まず最初にテストを書いて

42
00:02:27,840 --> 00:02:30,360
グリーンにするために必要なメソッドを
実装していきます。

43
00:02:30,680 --> 00:02:34,800
testIncrementで試してみます。

44
00:02:36,200 --> 00:02:39,120
カウンターを4にセットして

45
00:02:39,880 --> 00:02:41,800
2回インクリメントします。

46
00:02:42,120 --> 00:02:44,520
セミコロンを使って

47
00:02:45,320 --> 00:02:47,360
「Increment; Increment」
と書けます。

48
00:02:47,680 --> 00:02:52,440
そして 4 に等しくなって欲しいわけです。
そう書いておきましょう。

49
00:02:52,760 --> 00:02:53,520
オッケー。

50
00:02:53,920 --> 00:02:56,400
これはカウンターに 2 を加える筈です。

51
00:02:56,720 --> 00:02:58,160
コンパイルしましょう。

52
00:02:58,480 --> 00:03:00,560
見ての通り、メソッドが現れました。

53
00:03:01,120 --> 00:03:02,600
しかしこのボタンを押すと

54
00:03:02,920 --> 00:03:06,400
失敗するはずです。
increment メソッドを定義してませんから。

55
00:03:06,720 --> 00:03:07,720
ではクリックしてみましょう。

56
00:03:08,240 --> 00:03:11,560
「Instance of Counter did not understand increment」
(Counterのインスタンスはincrementを理解しませんでした)

57
00:03:11,880 --> 00:03:15,520
その通りで、increment を定義しなければなりません。
では Counter クラスに戻りましょう。

58
00:03:16,200 --> 00:03:17,120
ここです。

59
00:03:17,720 --> 00:03:20,800
新しいメソッド「increment」を作ります。

60
00:03:21,480 --> 00:03:25,800
count に 1 を足したいです。

61
00:03:27,320 --> 00:03:28,560
小文字にして

62
00:03:29,400 --> 00:03:30,320
「count + 1」

63
00:03:30,760 --> 00:03:32,520
コンパイルしましょう。Cmd+S です。

64
00:03:32,840 --> 00:03:37,440
するとメソッド名の左側に
ボタンがあるのが見えますね。

65
00:03:37,760 --> 00:03:40,920
「testIncrement」というテストがあって

66
00:03:41,320 --> 00:03:43,120
このメソッドにリンクされていることを

67
00:03:43,440 --> 00:03:44,640
システムが知っているからです。

68
00:03:44,960 --> 00:03:47,880
このボタンをクリックします。
これでグリーンになりました。

69
00:03:48,800 --> 00:03:51,480
CounterTest に行って
ボタンを押すと

70
00:03:52,160 --> 00:03:55,880
2つのテストが走って
2つとも合格しました。

71
00:03:56,200 --> 00:03:58,600
またイメージを保存する
良いタイミングがきました。

72
00:03:59,280 --> 00:04:00,120
Save。

73
00:04:00,960 --> 00:04:02,760
increment を定義したのと同じやり方で

74
00:04:03,080 --> 00:04:07,400
testDecrement を定義します。

75
00:04:08,200 --> 00:04:09,720
同じメソッドを使って

76
00:04:10,520 --> 00:04:15,440
「decrement; decrement」と。
ただし今回は count は 0 になって欲しいです。

77
00:04:16,080 --> 00:04:18,640
1 を 2回引くからです。

78
00:04:19,800 --> 00:04:23,120
コンパイルします。Cmd+S。
メソッドが現れました。

79
00:04:23,440 --> 00:04:27,400
実行すると
失敗するはずです。

80
00:04:27,720 --> 00:04:29,640
「decrement」を知らないからです。


81
00:04:29,960 --> 00:04:32,480
まだ定義していないので
全くもって正常なことです。

82
00:04:33,640 --> 00:04:37,920
では Counter クラスに戻って
「decrement」を定義しましょう。

83
00:04:39,080 --> 00:04:41,600
今回は 1 を引かなければなりません。

84
00:04:44,480 --> 00:04:45,240
繰り返しになりますが

85
00:04:45,560 --> 00:04:48,400
このメソッドに関連つけられたテストが
あることを認識して

86
00:04:48,720 --> 00:04:49,880
左側にボタンが出ます。

87
00:04:50,200 --> 00:04:52,600
これをクリックすると
グリーンになります。

88
00:04:52,920 --> 00:04:55,120
さて、CounerTestをクリックすると

89
00:04:55,440 --> 00:04:57,280
その中の全てのテストが走ります。

90
00:04:57,840 --> 00:05:01,440
3つのテストが走って
3つが合格しました。

91
00:05:01,760 --> 00:05:03,560
イメージをセーブする良いタイミングです。

92
00:05:04,920 --> 00:05:08,400
このビデオでは
テストクラスを定義して

93
00:05:08,720 --> 00:05:10,800
メソッドを定義する方法を学びました。

94
00:05:11,120 --> 00:05:15,440
繰り返しますが、Pharo では
テスト駆動開発が推奨されています。

95
00:05:15,760 --> 00:05:17,640
テストを書くことは本当に簡単です。

96
00:05:17,960 --> 00:05:22,640
次の週では、今回書いたような
decrement や increment のような

97
00:05:22,960 --> 00:05:25,880
メソッドを更に簡単に定義するやり方を
見ていきます。
