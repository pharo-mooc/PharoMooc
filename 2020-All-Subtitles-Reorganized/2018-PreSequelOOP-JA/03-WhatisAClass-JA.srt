1
00:00:01,160 --> 00:00:04,960
-こんにちは。この講義では
クラスとは何かを見ていきましょう。

2
00:00:05,280 --> 00:00:08,240
基本的に
クラスはオブジェクトの工場です。

3
00:00:08,560 --> 00:00:12,160
より正確には
クラスはオブジェクトの鋳型です。

4
00:00:12,480 --> 00:00:15,480
このスライドを見てください。
大きな機械があります。

5
00:00:15,800 --> 00:00:16,960
バスタブを作る機械です。

6
00:00:17,280 --> 00:00:22,120
この機械はバスタブを沢山作ります。

7
00:00:22,440 --> 00:00:26,600
おそらく何千個、あるいは何十万個の
バスタブを作ります。

8
00:00:26,920 --> 00:00:31,280
クラスもまた何十万個もの
オブジェクトを作ります。

9
00:00:31,600 --> 00:00:33,720
そして、それらのオブジェクトは
いずれも自律的です。

10
00:00:34,040 --> 00:00:35,880
つまり、オブジェクトを1つ取ると

11
00:00:36,200 --> 00:00:38,440
このオブジェクトは
独自のプロパティと

12
00:00:38,760 --> 00:00:41,480
他のオブジェクトと共有しない
状態を持っています。

13
00:00:41,800 --> 00:00:45,960
しかし、それらは皆
同じクラスにより作られたので

14
00:00:46,280 --> 00:00:48,880
これらのオブジェクトは皆
同じ振る舞いを共有します。

15
00:00:50,800 --> 00:00:55,680
つまり、ここでわかることは
クラスはオブジェクトが持つ

16
00:00:56,000 --> 00:00:59,000
全ての変数と特性を定義する
ということです。

17
00:00:59,320 --> 00:01:01,880
そしてそのインスタンスは全て
同じ特性を持つということです。

18
00:01:02,200 --> 00:01:03,800
そしてクラスは振る舞いを定義します。

19
00:01:04,120 --> 00:01:06,880
振る舞いはこれら全てのオブジェクトで
共有されます。

20
00:01:07,200 --> 00:01:12,600
ここでの工夫は、オブジェクトは
同じメソッドを定義するのではなく

21
00:01:12,920 --> 00:01:15,240
メソッドはインスタンスに共有される
ということです。

22
00:01:15,560 --> 00:01:17,040
こうして、空間を最適化しています。

23
00:01:17,360 --> 00:01:21,960
システム中に似たようなメソッドを
何千個ももったりしなくて済みます。

24
00:01:24,160 --> 00:01:26,920
クラスはオブジェクトのプロパティを
要素に分解します。

25
00:01:27,240 --> 00:01:32,520
例えば、全ての矩形は
高さと幅を持ちますが

26
00:01:34,040 --> 00:01:38,120
1つの矩形は他の矩形とは

27
00:01:38,440 --> 00:01:40,240
異なる高さと幅の値を持ちます。

28
00:01:40,560 --> 00:01:42,800
振る舞いは1度だけ定義すれば

29
00:01:43,120 --> 00:01:47,320
全てのオブジェクトが
この振る舞いを再利用できます。

30
00:01:47,640 --> 00:01:50,920
このクラスの全てのインスタンスが
この振る舞いを再利用します。

31
00:01:51,240 --> 00:01:54,560
メソッド「top」の定義を見てください。

32
00:01:54,880 --> 00:01:58,320
全ての矩形はこのメッセージに反応して

33
00:01:59,640 --> 00:02:02,040
このメソッドを実行して
答えることができます。

34
00:02:03,600 --> 00:02:08,000
このUMLの図でお見せしているのは
例えば

35
00:02:09,320 --> 00:02:13,440
ここで矩形は2つの点で表現されます。

36
00:02:13,760 --> 00:02:15,520
起点(origin)と隅(corner)です。

37
00:02:15,840 --> 00:02:19,040
そしてシステムに
複数のメソッドを提供します。

38
00:02:19,360 --> 00:02:21,520
「area」や「topCorner」等です。

39
00:02:21,840 --> 00:02:23,280
さて、ここで本当に重要なのは

40
00:02:23,600 --> 00:02:24,840
それぞれの矩形が

41
00:02:25,160 --> 00:02:26,960
クラス「rectangle」のインスタンスで

42
00:02:27,280 --> 00:02:28,200
それぞれ異なるプロパティを
持っていることです。

43
00:02:28,520 --> 00:02:31,640
平たい矩形や正方形のような矩形や

44
00:02:31,960 --> 00:02:33,760
高い矩形を得ることができるのです。

45
00:02:34,080 --> 00:02:40,320
全て幅と高さを持ち
同じ振る舞いを持ちます。

46
00:02:40,640 --> 00:02:41,840
しかしそれぞれ異なる値を持ちます。

47
00:02:42,160 --> 00:02:44,480
それぞれのインスタンスは
それ特有の値を持ちます。

48
00:02:46,240 --> 00:02:48,880
これがこのスライドの意味です。

49
00:02:49,200 --> 00:02:53,200
クラスはプロパティを定義します。

50
00:02:53,520 --> 00:02:57,040
そのクラスの全てのインスタンスが
そのプロパティを持ちますが

51
00:02:57,360 --> 00:02:58,560
実際の値は異なります。

52
00:02:58,880 --> 00:03:01,680
それぞれのインスタンスは
それ独自の値を持ちます。

53
00:03:02,000 --> 00:03:03,840
そしてクラスは振る舞いを定義します。

54
00:03:04,160 --> 00:03:07,160
振る舞いはクラスの全てのインスタンスに
共有されます。

55
00:03:08,880 --> 00:03:12,120
クラスとインスタンスの違いを
見てみましょう。

56
00:03:12,440 --> 00:03:15,200
オブジェクトは
クラスのインスタンスです。

57
00:03:15,520 --> 00:03:17,920
オブジェクトはクラスに作られます。

58
00:03:18,240 --> 00:03:20,880
クラスは振る舞いを規定します。

59
00:03:21,200 --> 00:03:25,560
そのクラスの全てのインスタンスが
その振る舞いに従い、また、実行します。

60
00:03:25,880 --> 00:03:29,200
そして振る舞いは、そのクラスの
全てのインスタンスに共有されます。

61
00:03:29,520 --> 00:03:33,440
そしてクラスはインスタンスの
構造を規定します。

62
00:03:33,760 --> 00:03:37,280
しかしクラスは
インスタンスが持つ値は定めません。

63
00:03:39,600 --> 00:03:42,920
つまり、ここで理解すべきことは
1つのクラスのインスタンスは

64
00:03:43,240 --> 00:03:45,560
全て同じ振る舞いを共有します。
どうやって？

65
00:03:45,880 --> 00:03:49,600
こうです。ある1つの矩形に
メッセージを送ると

66
00:03:49,920 --> 00:03:52,880
その矩形のクラスで
メソッドを探索します。

67
00:03:53,200 --> 00:03:58,400
そして見つかったメソッドを
このオブジェクトに適用します。

68
00:03:58,720 --> 00:04:01,120
このようにして、別の矩形に
そのメッセージを送れば

69
00:04:01,440 --> 00:04:05,040
同じメソッドが見つかり
この矩形に適用します。

70
00:04:05,360 --> 00:04:07,880
このようにして
振る舞いを共有しています。

71
00:04:08,200 --> 00:04:13,080
したがって、あるクラスの全ての
インスタンスが同じ振る舞いを共有します。

72
00:04:15,160 --> 00:04:19,560
ここで理解すべきことは
メソッドは動的に探索されるということです。

73
00:04:19,880 --> 00:04:24,560
メソッドをそのオブジェクトの
クラスで探索します。

74
00:04:24,880 --> 00:04:28,840
ここに例があります。
犬、猫、魚です。

75
00:04:29,160 --> 00:04:33,000
犬にメッセージ「angry」（怒る）
を送ると

76
00:04:33,320 --> 00:04:34,720
クラス「dog」の中を見て

77
00:04:35,040 --> 00:04:37,800
メソッドの定義を見つけて
それを実行します。

78
00:04:38,120 --> 00:04:41,400
そして、この振る舞いは
クラス「cat」のものとは異なります。

79
00:04:41,720 --> 00:04:45,240
しかし全ての犬は
同じメソッドを実行します。

80
00:04:47,600 --> 00:04:50,000
ここでも
同じメッセージを

81
00:04:50,320 --> 00:04:52,960
別のクラスの別のクラスに送ると

82
00:04:53,280 --> 00:04:55,680
異なるメソッドが実行されます。

83
00:04:56,000 --> 00:04:59,200
クラス「cat」のインスタンスに
メッセージ「angry」を送っても

84
00:04:59,520 --> 00:05:01,440
クラス「dog」のインスタンスに
メッセージ「angry」を送った場合と

85
00:05:01,760 --> 00:05:06,000
同じメソッドを実行しません。

86
00:05:07,400 --> 00:05:11,600
つまり、知っていただきたいことは
オブジェクトはクラスのインスタンスであり

87
00:05:11,920 --> 00:05:13,360
クラスはオブジェクトの工場です。

88
00:05:13,680 --> 00:05:20,200
クラスはそれぞれのインスタンスの
オブジェクトが持つ状態を記述し

89
00:05:20,520 --> 00:05:24,920
全てのインスタンスが共有する
振る舞いを定義します。
