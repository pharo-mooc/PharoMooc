1
00:00:00,160 --> 00:00:00,200
"オブジェクト指向プログラミングと
TDDでの設計"

2
00:00:00,520 --> 00:00:00,560
"初めてのオブジェクト、
クラス、メソッド、メッセージ"

3
00:00:00,880 --> 00:00:00,920
ステファン・デュカス
Inria リサーチ・ディレクター

4
00:00:01,640 --> 00:00:04,200
この講義では、この後に続く講義で
出てくる概念の

5
00:00:04,520 --> 00:00:06,520
概要を見ていきます。

6
00:00:06,840 --> 00:00:12,840
つまり、オブジェクト、クラス、メソッド、
メッセージとは何かを見ていきます。

7
00:00:14,120 --> 00:00:15,080
では、オブジェクトとは何でしょう？

8
00:00:15,400 --> 00:00:17,120
オブジェクトは
オブジェクト指向の世界にある

9
00:00:17,440 --> 00:00:19,520
小さな生きた実体で、

10
00:00:19,840 --> 00:00:22,760
この実体は以下の3つのプロパティで
特徴付けられます。

11
00:00:23,080 --> 00:00:24,640
状態、振る舞い、そして
アイデンティティです。

12
00:00:24,960 --> 00:00:26,400
では、例を見てみましょう。

13
00:00:26,720 --> 00:00:28,320
Logo のタートルでは…

14
00:00:29,400 --> 00:00:32,240
Logo のタートルは小さな実体、
オブジェクトです。

15
00:00:32,560 --> 00:00:36,760
タートルは状態を持っています。例えば、
ペンが上がっているか下がっているか、

16
00:00:37,080 --> 00:00:40,320
大きさ、色、方向があります。

17
00:00:40,640 --> 00:00:42,680
タートルには振る舞いもあります。

18
00:00:43,000 --> 00:00:45,800
つまり、床に線を引いたり

19
00:00:46,120 --> 00:00:48,640
ジャンプしたり隠したりできます。

20
00:00:48,960 --> 00:00:52,720
そしてまた、タートルは
アイデンティティを持っています。

21
00:00:53,040 --> 00:00:55,600
つまりどういうことかというと
この絵を見てください。

22
00:00:55,920 --> 00:00:59,000
2つのタートルがあります。
クモが1つとカメが1つです。

23
00:00:59,320 --> 00:01:02,320
それらは別々の実体であり、
クモはカメではありません。

24
00:01:03,640 --> 00:01:07,480
さて、オブジェクト指向プログラミングの
パラダイムでは

25
00:01:07,800 --> 00:01:08,960
全てのものはオブジェクトです。

26
00:01:09,280 --> 00:01:13,120
ディスク上のファイルですら
オブジェクトなのです。

27
00:01:13,440 --> 00:01:15,720
ファイルはパスと内容で表現されます。

28
00:01:16,040 --> 00:01:17,440
それがオブジェクトの状態です。

29
00:01:17,760 --> 00:01:18,520
振る舞いはというと…

30
00:01:18,840 --> 00:01:22,480
例えば、ファイルをコピーしたり
ファイルの名前を変更できます。

31
00:01:22,800 --> 00:01:26,200
そしてアイデンティティは明らかです。
ファイルはそれぞれ異なります。

32
00:01:26,520 --> 00:01:29,280
そうでないと、ディスクには
1つしかファイルを持てないことになります。

33
00:01:29,600 --> 00:01:31,120
ここで、アイデンティティと

34
00:01:31,440 --> 00:01:34,480
等しさの違いについてお話します。

35
00:01:34,800 --> 00:01:38,640
紛らわしい概念ですが
こう考えると実に単純です。

36
00:01:38,960 --> 00:01:41,960
想像してみてください。あなたは
ピザ屋さんでピザを注文したいとします。

37
00:01:42,280 --> 00:01:44,520
店内では誰かがあなたが食べたいのと
同じピザを食べているとします。

38
00:01:44,840 --> 00:01:47,640
アイデンティティとは
その人が食べているそのピザを食べることで、

39
00:01:47,960 --> 00:01:52,360
一方、等しさというのは
同じピザを食べたいということです。

40
00:01:52,680 --> 00:01:56,240
アイデンティティとは
そのオブジェクトへのポインターで、

41
00:01:56,560 --> 00:02:00,480
一方で、等しさとは
そのオブジェクトに似ているということです。

42
00:02:00,800 --> 00:02:03,120
では、オブジェクトの話に戻りましょう。

43
00:02:03,440 --> 00:02:06,480
オブジェクトはメッセージに反応します。
そしてあるアクションを実行します。

44
00:02:06,800 --> 00:02:09,400
つまり、このスライドで言うと
ここにタートルがあって、

45
00:02:09,720 --> 00:02:11,800
タートルに
ある地点に行くように

46
00:02:12,120 --> 00:02:13,560
メッセージを送ります。

47
00:02:13,880 --> 00:02:16,240
つまり「go: 100」という
メッセージを送ります。

48
00:02:16,560 --> 00:02:19,760
するとタートルは移動して
床に跡を残します。

49
00:02:20,960 --> 00:02:21,960
ここで
理解していただきたいのですが

50
00:02:22,280 --> 00:02:25,360
異なるオブジェクトが
同じメッセージを理解して

51
00:02:25,680 --> 00:02:27,680
それぞれのオブジェクトが
別々の反応をしますが

52
00:02:28,000 --> 00:02:29,880
これでも同じ種類のオブジェクトです。

53
00:02:30,200 --> 00:02:32,640
「aWindow open」であれば
ウィンドウが開き、

54
00:02:32,960 --> 00:02:35,920
「aFile open」であれば
ファイルの内容が得られます。

55
00:02:36,240 --> 00:02:40,840
「aZip open」であれば
Zipの中身が得られるでしょう。

56
00:02:42,560 --> 00:02:43,600
つまり、語彙においては

57
00:02:43,920 --> 00:02:48,360
メッセージのレシーバが何であるか
を理解することがとても重要です。

58
00:02:48,680 --> 00:02:49,440
メッセージレシーバは

59
00:02:49,760 --> 00:02:52,600
メッセージを実際に
受け取るオブジェクトを特定します。

60
00:02:52,920 --> 00:02:55,960
例えば
aTurtle jumpTo: aLocation

61
00:02:56,280 --> 00:02:59,520
aTurtleにメッセージ「jumpTo」を送ります。
これがレシーバです。

62
00:02:59,840 --> 00:03:03,760
同様に、「aWindow open」であれば
レシーバーは aWindow です。

63
00:03:04,080 --> 00:03:05,960
「aFile open」も同様です。

64
00:03:06,640 --> 00:03:09,520
では、メソッドとは何でしょうか？
メソッドとは、一連の指示に

65
00:03:09,840 --> 00:03:10,960
名前をつけたものです。

66
00:03:11,280 --> 00:03:14,360
クレープを例にしてみましょう。

67
00:03:14,680 --> 00:03:15,680
クレープを作るには

68
00:03:16,000 --> 00:03:20,920
卵と牛乳と小麦粉と砂糖が必要です。

69
00:03:21,240 --> 00:03:23,680
これをレシピといいますが
メソッドとはレシピなのです。

70
00:03:24,000 --> 00:03:25,880
つまり、一連の指示に
名前が付けられたものですが

71
00:03:26,200 --> 00:03:29,080
オブジェクトはメッセージへの反応として
これを実行するのです。

72
00:03:30,560 --> 00:03:33,360
では、メッセージとメソッドの
違いは何でしょう？

73
00:03:33,680 --> 00:03:36,080
メッセージは何をするかを表します。
一種の命令です。

74
00:03:36,400 --> 00:03:38,520
「stef makeCrepes」
「robert makeCrepes」…

75
00:03:38,840 --> 00:03:42,800
これらは命令です。
メソッドはその命令をどう遂行するかです。

76
00:03:43,120 --> 00:03:45,160
ステップのリストです。

77
00:03:45,480 --> 00:03:50,160
つまり、メッセージとは何をやるのかで
メソッドとはどうやるのかです。

78
00:03:51,760 --> 00:03:54,720
ここで重要なのは
1つのメッセージに対して

79
00:03:55,040 --> 00:03:57,200
同じ名前の複数のメソッドが
対応し得ることです。

80
00:03:57,520 --> 00:03:58,880
「Window >> open」には

81
00:03:59,200 --> 00:04:01,360
ウィンドウを開くための
一連の指示が対応します。

82
00:04:01,680 --> 00:04:02,680
「File >> open」には

83
00:04:03,000 --> 00:04:05,160
ファイルを開くための
一連の指示が対応します。

84
00:04:05,480 --> 00:04:09,200
どれも同じメッセージで
それぞれ同じメッセージを理解します。

85
00:04:10,320 --> 00:04:13,520
さて、ではクラスについて見てみましょう。

86
00:04:13,840 --> 00:04:17,520
オブジェクトはクラスからやってきます。
クラスとはオブジェクトの工場のようなものです。

87
00:04:17,840 --> 00:04:21,880
クラスはオブジェクトの鋳型として働きます。

88
00:04:22,200 --> 00:04:24,280
スライドを見てください。

89
00:04:24,600 --> 00:04:26,760
バスタブを製造しています。

90
00:04:27,080 --> 00:04:30,120
鉄を投入すれば、バスタブが得られます。

91
00:04:30,440 --> 00:04:33,880
ここで重要なのは
クラスは沢山のインスタンスを作りますが

92
00:04:34,200 --> 00:04:36,840
それぞれのインスタンスは
それぞれ別々の実体だということです。

93
00:04:37,160 --> 00:04:39,640
つまり
バスタブを1つ破壊しても

94
00:04:39,960 --> 00:04:41,840
それ以外のバスタブは壊れません。

95
00:04:42,160 --> 00:04:44,840
それぞれの実体は
それぞれのアイデンティティを持っています。

96
00:04:45,160 --> 00:04:48,480
それでも、それらは全て
同じクラスのインスタンスです。

97
00:04:48,800 --> 00:04:51,000
別の見方をしてみましょう。

98
00:04:51,320 --> 00:04:55,160
クラスはインスタンスの
全ての変数を定義し、

99
00:04:55,480 --> 00:04:59,600
インスタンスが持つべき
振る舞いを定義します。

100
00:05:01,720 --> 00:05:04,280
では、どうやって
オブジェクトを作るのでしょうか？

101
00:05:04,600 --> 00:05:07,120
クラスに「new」という
メッセージを送ります。

102
00:05:07,440 --> 00:05:10,040
例えば、ここに
タートルのクラスがあります。

103
00:05:10,360 --> 00:05:13,600
「新しいインスタンスが欲しいのですが
作ってくれますか？」とお願いします。

104
00:05:13,920 --> 00:05:18,360
メッセージ「new」を送ると
新しいタートルが得られます。

105
00:05:18,680 --> 00:05:21,080
システム中の
どんなオブジェクトでも同様です。

106
00:05:21,400 --> 00:05:24,600
ファイルであれば、メッセージ「new」を
送ればファイルが得られます。

107
00:05:25,960 --> 00:05:30,840
ここで理解すべき重要なことは
メソッドはレシーバーのクラスで

108
00:05:31,160 --> 00:05:32,400
動的に探索されることです。

109
00:05:32,720 --> 00:05:37,760
ここに3種類のクラスと
オブジェクトがあります。

110
00:05:38,080 --> 00:05:39,880
まず犬があります
Dogクラスのインスタンスです。

111
00:05:40,200 --> 00:05:41,560
猫があります。
Catクラスのインスタンスです。

112
00:05:41,880 --> 00:05:45,760
そして魚です。
Fishクラスのインスタンスです。

113
00:05:47,760 --> 00:05:50,320
犬は猫とは異なる反応をします。

114
00:05:50,640 --> 00:05:53,240
つまり、犬に
メッセージ「angry」を送ると

115
00:05:53,560 --> 00:05:55,280
Dogクラスを見て

116
00:05:55,600 --> 00:05:58,520
正しいメソッドを見つけて
それを実行します。

117
00:05:58,840 --> 00:05:59,880
こちらも同様です。

118
00:06:00,200 --> 00:06:04,920
「angry」という1つのメッセージを
複数のインスタンスに送ると

119
00:06:05,240 --> 00:06:07,800
それらはそれぞれのクラスの中で

120
00:06:08,120 --> 00:06:11,800
正しい振る舞いを探して実行します。

121
00:06:12,920 --> 00:06:15,880
さて、これで
オブジェクト指向プログラミングで

122
00:06:16,200 --> 00:06:19,400
最も重要な概念を
全てカバーしました。

123
00:06:19,720 --> 00:06:22,560
オブジェクトは個別の実態で
クラスのインスタンスです。

124
00:06:22,880 --> 00:06:25,640
クラスはインスタンスの

125
00:06:25,960 --> 00:06:27,480
形と振る舞いを規定します。

126
00:06:27,800 --> 00:06:31,800
オブジェクトは
メッセージを受け取り

127
00:06:32,120 --> 00:06:34,960
対応するメソッドを実行します。

128
00:06:35,280 --> 00:06:36,200
メッセージとは命令で

129
00:06:36,520 --> 00:06:40,560
メソッドは一連の指示です。

130
00:06:41,680 --> 00:06:44,680
異なるオブジェクトが
同じメッセージを理解して

131
00:06:45,000 --> 00:06:46,960
それぞれ異なる反応をします。

132
00:06:47,280 --> 00:06:50,600
これからの講義では
これらを見ていきます。
