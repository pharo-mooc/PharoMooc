1
00:00:01,160 --> 00:00:04,040
この講義では
オブジェクトが何であるかを教えます。

2
00:00:04,360 --> 00:00:07,600
オブジェクトは小さな実体で
状態を持ち

3
00:00:07,920 --> 00:00:11,160
メッセージに対して
メソッドを実行することで反応します。

4
00:00:11,480 --> 00:00:13,200
では、オブジェクトとは何でしょう？

5
00:00:13,520 --> 00:00:18,040
オブジェクトとは、小さなコンピュータで
3つのプロパティで特徴付けられます。

6
00:00:18,360 --> 00:00:21,240
状態と振る舞いと
アイデンティティです。

7
00:00:21,560 --> 00:00:23,640
そして他のオブジェクトと協調します。

8
00:00:23,960 --> 00:00:28,760
複雑なタスクを遂行するためです。
孤立しているわけではありません。

9
00:00:29,640 --> 00:00:31,920
まずは、いくつかの例を挙げてみます。

10
00:00:32,240 --> 00:00:35,720
サイコロを想像してみてください。
本当に簡単なオブジェクトです。

11
00:00:36,600 --> 00:00:39,240
サイコロの状態は面の数です。

12
00:00:39,560 --> 00:00:43,200
振る舞いは
「サイコロを振って結果を得る」

13
00:00:43,520 --> 00:00:47,400
そしてサイコロは
「aDieHandle」の中に入れて

14
00:00:47,720 --> 00:00:50,240
複数個のサイコロを
同時に振ることができます。

15
00:00:51,520 --> 00:00:53,960
では、矩形を例にすると

16
00:00:54,280 --> 00:00:56,920
矩形を特徴付けるものは
X と Y と

17
00:00:57,240 --> 00:01:01,520
広がり(extent)、つまり
幅(width)と高さ(height)です。

18
00:01:01,840 --> 00:01:03,920
これが矩形が持つ状態です。

19
00:01:04,240 --> 00:01:06,400
すると、矩形は自分を
クリッピングしたり

20
00:01:06,720 --> 00:01:10,560
面積を求めたり
拡げたり縮めたり

21
00:01:10,880 --> 00:01:12,280
というような振る舞いを持ちます。

22
00:01:12,600 --> 00:01:16,000
さらに、矩形は他のオブジェクトと
やりとりができます。

23
00:01:16,320 --> 00:01:18,560
例えば、コンピュータ上の描画画面は

24
00:01:18,880 --> 00:01:24,560
ウィンドウの再表示を最小化するために
いくつかの矩形を持っていて

25
00:01:24,880 --> 00:01:29,280
ウィンドウを動かすと
画面が矩形を生成して

26
00:01:29,600 --> 00:01:33,960
再表示が必要になる矩形領域を計算します。

27
00:01:34,280 --> 00:01:36,640
さて、連絡先の例です。

28
00:01:36,960 --> 00:01:39,920
あなたのiPhoneには
友達が連絡先に登録されていますね。

29
00:01:40,240 --> 00:01:44,400
このオブジェクトが、
友達のメールアドレスや名前や

30
00:01:44,720 --> 00:01:48,200
住所や電話番号や写真を表します。

31
00:01:48,520 --> 00:01:52,720
振る舞いは
画面に表示したり

32
00:01:53,040 --> 00:01:54,320
検索することです。

33
00:01:54,640 --> 00:01:57,480
さらに、この連絡先は

34
00:01:57,800 --> 00:02:01,600
連絡先アプリで複数の連絡先が
管理されています。

35
00:02:01,920 --> 00:02:04,280
同様に、ゲームの場合

36
00:02:04,600 --> 00:02:07,080
自分が持っているゲームを
管理するのであれば

37
00:02:07,400 --> 00:02:11,120
個々のゲームについて
名前や

38
00:02:11,440 --> 00:02:13,280
PS2用なのかPS3用なのか

39
00:02:13,600 --> 00:02:15,440
購入価格

40
00:02:15,760 --> 00:02:16,960
最後まで完了したかどうか
があって

41
00:02:17,280 --> 00:02:22,480
このオブジェクトをディスク上に
書き込むことができて

42
00:02:22,800 --> 00:02:26,960
アイテムコレクターシステムと協調して

43
00:02:27,280 --> 00:02:29,280
ゲーム収集を助けます。

44
00:02:29,600 --> 00:02:33,680
つまりどういうことかというと
オブジェクトには状態と

45
00:02:34,000 --> 00:02:37,840
振る舞いとアイデンティティがあり
他のオブジェクトと協調して

46
00:02:38,160 --> 00:02:40,040
より複雑なタスクを遂行します。

47
00:02:43,760 --> 00:02:47,560
オブジェクトのアイデンティティ
についてですが

48
00:02:47,880 --> 00:02:50,040
アイデンティティはよく
等しさと混同されます。

49
00:02:50,360 --> 00:02:53,920
こうすると混同を防ぐことができます。

50
00:02:54,240 --> 00:02:57,280
ピザ屋さんに行って
ピザを注文したいとします。

51
00:02:57,600 --> 00:02:59,560
そこにいる人が食べているのと
同じピザを注文したいとします。

52
00:02:59,880 --> 00:03:04,160
アイデンティティの場合には
その人のピザを食べることになります。

53
00:03:04,480 --> 00:03:07,120
等しさの場合には
単に同じピザが欲しいということです。

54
00:03:07,440 --> 00:03:12,520
つまり、アイデンティティは
あなたが指差しているそのオブジェクト

55
00:03:12,840 --> 00:03:15,760
等しさは同じものが
欲しいということです。

56
00:03:16,080 --> 00:03:17,920
これらのオブジェクトは同じですか？

57
00:03:20,080 --> 00:03:22,960
オブジェクトには責任があります。

58
00:03:23,280 --> 00:03:27,040
責任は振る舞いを通して示されます。

59
00:03:27,360 --> 00:03:30,600
振る舞いを実行することで。

60
00:03:30,920 --> 00:03:33,360
例えば、タートルの責任は

61
00:03:33,680 --> 00:03:35,880
動く時に線を描くことです。

62
00:03:36,720 --> 00:03:39,640
これが、このオブジェクトの
責任です。

63
00:03:39,960 --> 00:03:44,360
ファイルには中身を保持することと
開くという責任があります。

64
00:03:44,680 --> 00:03:48,760
オブジェクトは責任を持つということを
理解することはとても重要です。

65
00:03:49,080 --> 00:03:52,960
そして、責任は
実行する時に与えられる振る舞いに

66
00:03:53,280 --> 00:03:57,000
埋め込まれ実現されています。

67
00:03:59,080 --> 00:04:01,040
また、オブジェクトは
データをカプセル化します。

68
00:04:01,360 --> 00:04:03,520
つまり、このスライドを見ての通り

69
00:04:03,840 --> 00:04:07,800
データはクライアントに
露出されないということです。

70
00:04:08,120 --> 00:04:12,000
したがって、オブジェクトのメソッドのみが
データにアクセスできます。

71
00:04:12,320 --> 00:04:15,120
データはプライベートなものであると
考えるべき、ということです。

72
00:04:15,440 --> 00:04:18,160
メソッドは露出されますが

73
00:04:18,480 --> 00:04:22,480
他のオブジェクト、つまりクライアントは
オブジェクトにメッセージを

74
00:04:22,800 --> 00:04:25,800
送ることしかできません。
そして実行されるメソッドが

75
00:04:26,120 --> 00:04:29,280
そのオブジェクトのプライベートなデータを
変更したり使ったりします。

76
00:04:29,600 --> 00:04:32,760
そういうわけで、このスライドでは
メッセージとメソッドの間に

77
00:04:33,080 --> 00:04:34,760
大きな境界線が引かれています。

78
00:04:37,080 --> 00:04:39,240
オブジェクトはメッセージに反応します。

79
00:04:39,560 --> 00:04:43,280
例えば、タートルに
メッセージ「go」を送ると

80
00:04:43,600 --> 00:04:46,000
タートルはそれに対する反応として
メソッドを実行します。

81
00:04:46,320 --> 00:04:51,840
そのメソッドは画面上でタートルを動かして
画面に線を描きます。

82
00:04:52,840 --> 00:04:55,280
ここで見ていただきたいのは
異なるオブジェクトが

83
00:04:55,600 --> 00:04:57,040
同じメッセージを理解できる
ということです。

84
00:04:57,360 --> 00:05:01,080
実際、ウィンドウに開くように依頼すると
デスクトップ上に新しいウィンドウが出ます。

85
00:05:01,400 --> 00:05:04,960
ウィンドウにファイルを開く依頼をすると
その内容を見ることができます。

86
00:05:05,280 --> 00:05:09,880
Zip アーカイブを開くと
Zipの中のアイテムを見ます。

87
00:05:10,200 --> 00:05:13,080
ご覧の通り
どれも同じメッセージです。

88
00:05:13,400 --> 00:05:16,560
ただし、それぞれ別々の振る舞いが
実行されます。

89
00:05:18,360 --> 00:05:22,240
さて、メソッドが振る舞いを規定します。

90
00:05:22,560 --> 00:05:27,000
Rectangleクラスがあります。
その矩形の高さが定義されています。


91
00:05:27,320 --> 00:05:29,080
矩形の高さを定義するには、例えば

92
00:05:29,400 --> 00:05:33,640
矩形の底と天井の差を計算します。

93
00:05:35,160 --> 00:05:39,160
さらに矩形はメソッド「area」も
定義できます。

94
00:05:39,480 --> 00:05:44,320
幅と高さを掛け算することで
面積を計算します。

95
00:05:44,640 --> 00:05:47,880
これらのメソッドは
振る舞いを規定します。

96
00:05:48,200 --> 00:05:49,640
その振る舞いとはメッセージへの反応です。

97
00:05:49,960 --> 00:05:54,640
さて、メソッドは自分自身に
他のメッセージを送ることもできます。

98
00:05:54,960 --> 00:06:01,160
例えば、メッセージ「topCenter」は
メッセージ「center」と

99
00:06:01,480 --> 00:06:02,600
メッセージ「top」を送ります。

100
00:06:02,920 --> 00:06:06,920
メッセージ「center」も
メッセージ「topLeft」と「bottomRight」を

101
00:06:07,240 --> 00:06:08,560
その矩形に送ります。

102
00:06:08,880 --> 00:06:11,440
つまり、あるメソッドの実行で

103
00:06:11,760 --> 00:06:13,960
次々と多くのメッセージが送られます。

104
00:06:14,880 --> 00:06:15,960
問題ありません。

105
00:06:16,280 --> 00:06:19,000
この例でお見せしているのは
これらのメソッドは全て

106
00:06:19,320 --> 00:06:21,160
Rectangleクラスのメソッドです。

107
00:06:21,480 --> 00:06:23,120
クラスとは何かについては
後で見ることにしましょう。

108
00:06:23,440 --> 00:06:25,640
しかし、実際のところ
ここに挙げた通りである必要はありません。

109
00:06:25,960 --> 00:06:29,640
つまり、オブジェクトは他のオブジェクトに
移譲することもできます。

110
00:06:29,960 --> 00:06:32,560
つまり、オブジェクトは
「このタスクを遂行するためには

111
00:06:32,880 --> 00:06:36,880
いくつかの他のオブジェクトにメッセージを送って
サブタスクを遂行するよう依頼します。

112
00:06:37,200 --> 00:06:40,360
そしてそれぞれの結果を受け取って
集計して

113
00:06:40,680 --> 00:06:42,160
何かもっと大きなものを組み立てます。」
と言うこともできます。

114
00:06:45,800 --> 00:06:49,440
ここに、移譲の典型的な例があります。

115
00:06:49,760 --> 00:06:53,800
アイテムコレクターはそれぞれのアイテムに
アイテム自身をディスクに保存するように依頼できるし

116
00:06:54,120 --> 00:06:57,040
あるいは、
一般のオブジェクトをシリアライズする

117
00:06:57,360 --> 00:07:00,560
オブジェクトに依頼して

118
00:07:00,880 --> 00:07:03,040
アイテムコレクター自身を
ディスクに保存してもらうこともできます。

119
00:07:03,360 --> 00:07:07,920
どちらにするかは状況によります。
これは設計上の選択肢であって

120
00:07:08,240 --> 00:07:09,800
システム中にどう責任を
配分するのかによります。

121
00:07:10,120 --> 00:07:12,560
大事なことは、オブジェクトは

122
00:07:12,880 --> 00:07:15,400
タスクを他の誰かに移譲できることです。

123
00:07:17,360 --> 00:07:20,560
知るべきことは、オブジェクトは
状態や

124
00:07:20,880 --> 00:07:22,520
振る舞いやアイデンティティで
特徴付けられ

125
00:07:22,840 --> 00:07:26,320
オブジェクトは他のオブジェクトと
協調してタスクを実現し

126
00:07:26,640 --> 00:07:31,600
メッセージに対して反応して
メソッドの実行で答え

127
00:07:31,920 --> 00:07:34,920
そのオブジェクトは
1つまたは複数の他のオブジェクトに

128
00:07:35,240 --> 00:07:36,720
計算を移譲して

129
00:07:37,040 --> 00:07:39,640
それらを組み合わせることで
タスクを遂行するということです。
